# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scout_mini_msgs/RobotState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import scout_mini_msgs.msg
import std_msgs.msg

class RobotState(genpy.Message):
  _md5sum = "a9ce1599ddff7c1d744e7f660dd057d2"
  _type = "scout_mini_msgs/RobotState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

string robot

bool normal_state            
string control_mode      # IDLE, CAN, REMOTE, NONE
float64 battery_voltage

scout_mini_msgs/FaultState fault_state
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: scout_mini_msgs/FaultState
bool battery_under_voltage_failure
bool battery_under_voltage_alarm 
bool loss_remote_control"""
  __slots__ = ['header','robot','normal_state','control_mode','battery_voltage','fault_state']
  _slot_types = ['std_msgs/Header','string','bool','string','float64','scout_mini_msgs/FaultState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,robot,normal_state,control_mode,battery_voltage,fault_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot is None:
        self.robot = ''
      if self.normal_state is None:
        self.normal_state = False
      if self.control_mode is None:
        self.control_mode = ''
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.fault_state is None:
        self.fault_state = scout_mini_msgs.msg.FaultState()
    else:
      self.header = std_msgs.msg.Header()
      self.robot = ''
      self.normal_state = False
      self.control_mode = ''
      self.battery_voltage = 0.
      self.fault_state = scout_mini_msgs.msg.FaultState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.normal_state
      buff.write(_get_struct_B().pack(_x))
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d3B().pack(_x.battery_voltage, _x.fault_state.battery_under_voltage_failure, _x.fault_state.battery_under_voltage_alarm, _x.fault_state.loss_remote_control))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fault_state is None:
        self.fault_state = scout_mini_msgs.msg.FaultState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot = str[start:end]
      start = end
      end += 1
      (self.normal_state,) = _get_struct_B().unpack(str[start:end])
      self.normal_state = bool(self.normal_state)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_mode = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.battery_voltage, _x.fault_state.battery_under_voltage_failure, _x.fault_state.battery_under_voltage_alarm, _x.fault_state.loss_remote_control,) = _get_struct_d3B().unpack(str[start:end])
      self.fault_state.battery_under_voltage_failure = bool(self.fault_state.battery_under_voltage_failure)
      self.fault_state.battery_under_voltage_alarm = bool(self.fault_state.battery_under_voltage_alarm)
      self.fault_state.loss_remote_control = bool(self.fault_state.loss_remote_control)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.normal_state
      buff.write(_get_struct_B().pack(_x))
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d3B().pack(_x.battery_voltage, _x.fault_state.battery_under_voltage_failure, _x.fault_state.battery_under_voltage_alarm, _x.fault_state.loss_remote_control))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fault_state is None:
        self.fault_state = scout_mini_msgs.msg.FaultState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot = str[start:end]
      start = end
      end += 1
      (self.normal_state,) = _get_struct_B().unpack(str[start:end])
      self.normal_state = bool(self.normal_state)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_mode = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.battery_voltage, _x.fault_state.battery_under_voltage_failure, _x.fault_state.battery_under_voltage_alarm, _x.fault_state.loss_remote_control,) = _get_struct_d3B().unpack(str[start:end])
      self.fault_state.battery_under_voltage_failure = bool(self.fault_state.battery_under_voltage_failure)
      self.fault_state.battery_under_voltage_alarm = bool(self.fault_state.battery_under_voltage_alarm)
      self.fault_state.loss_remote_control = bool(self.fault_state.loss_remote_control)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d3B = None
def _get_struct_d3B():
    global _struct_d3B
    if _struct_d3B is None:
        _struct_d3B = struct.Struct("<d3B")
    return _struct_d3B
