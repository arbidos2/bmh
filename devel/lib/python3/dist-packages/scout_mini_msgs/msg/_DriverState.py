# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scout_mini_msgs/DriverState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class DriverState(genpy.Message):
  _md5sum = "4cd26ec35543dae5ae577b0645d8050a"
  _type = "scout_mini_msgs/DriverState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float64[4] driver_voltage
int16[4] driver_temperature
bool[4] communication_failure
bool[4] low_supply_voltage
bool[4] motor_over_temperature
bool[4] driver_over_current 
bool[4] driver_over_temperature
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','driver_voltage','driver_temperature','communication_failure','low_supply_voltage','motor_over_temperature','driver_over_current','driver_over_temperature']
  _slot_types = ['std_msgs/Header','float64[4]','int16[4]','bool[4]','bool[4]','bool[4]','bool[4]','bool[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,driver_voltage,driver_temperature,communication_failure,low_supply_voltage,motor_over_temperature,driver_over_current,driver_over_temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriverState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.driver_voltage is None:
        self.driver_voltage = [0.] * 4
      if self.driver_temperature is None:
        self.driver_temperature = [0] * 4
      if self.communication_failure is None:
        self.communication_failure = [False] * 4
      if self.low_supply_voltage is None:
        self.low_supply_voltage = [False] * 4
      if self.motor_over_temperature is None:
        self.motor_over_temperature = [False] * 4
      if self.driver_over_current is None:
        self.driver_over_current = [False] * 4
      if self.driver_over_temperature is None:
        self.driver_over_temperature = [False] * 4
    else:
      self.header = std_msgs.msg.Header()
      self.driver_voltage = [0.] * 4
      self.driver_temperature = [0] * 4
      self.communication_failure = [False] * 4
      self.low_supply_voltage = [False] * 4
      self.motor_over_temperature = [False] * 4
      self.driver_over_current = [False] * 4
      self.driver_over_temperature = [False] * 4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_4d().pack(*self.driver_voltage))
      buff.write(_get_struct_4h().pack(*self.driver_temperature))
      buff.write(_get_struct_4B().pack(*self.communication_failure))
      buff.write(_get_struct_4B().pack(*self.low_supply_voltage))
      buff.write(_get_struct_4B().pack(*self.motor_over_temperature))
      buff.write(_get_struct_4B().pack(*self.driver_over_current))
      buff.write(_get_struct_4B().pack(*self.driver_over_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 32
      self.driver_voltage = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 8
      self.driver_temperature = _get_struct_4h().unpack(str[start:end])
      start = end
      end += 4
      self.communication_failure = _get_struct_4B().unpack(str[start:end])
      self.communication_failure = list(map(bool, self.communication_failure))
      start = end
      end += 4
      self.low_supply_voltage = _get_struct_4B().unpack(str[start:end])
      self.low_supply_voltage = list(map(bool, self.low_supply_voltage))
      start = end
      end += 4
      self.motor_over_temperature = _get_struct_4B().unpack(str[start:end])
      self.motor_over_temperature = list(map(bool, self.motor_over_temperature))
      start = end
      end += 4
      self.driver_over_current = _get_struct_4B().unpack(str[start:end])
      self.driver_over_current = list(map(bool, self.driver_over_current))
      start = end
      end += 4
      self.driver_over_temperature = _get_struct_4B().unpack(str[start:end])
      self.driver_over_temperature = list(map(bool, self.driver_over_temperature))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.driver_voltage.tostring())
      buff.write(self.driver_temperature.tostring())
      buff.write(self.communication_failure.tostring())
      buff.write(self.low_supply_voltage.tostring())
      buff.write(self.motor_over_temperature.tostring())
      buff.write(self.driver_over_current.tostring())
      buff.write(self.driver_over_temperature.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 32
      self.driver_voltage = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 8
      self.driver_temperature = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      start = end
      end += 4
      self.communication_failure = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.communication_failure = list(map(bool, self.communication_failure))
      start = end
      end += 4
      self.low_supply_voltage = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.low_supply_voltage = list(map(bool, self.low_supply_voltage))
      start = end
      end += 4
      self.motor_over_temperature = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.motor_over_temperature = list(map(bool, self.motor_over_temperature))
      start = end
      end += 4
      self.driver_over_current = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.driver_over_current = list(map(bool, self.driver_over_current))
      start = end
      end += 4
      self.driver_over_temperature = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.driver_over_temperature = list(map(bool, self.driver_over_temperature))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4h = None
def _get_struct_4h():
    global _struct_4h
    if _struct_4h is None:
        _struct_4h = struct.Struct("<4h")
    return _struct_4h
