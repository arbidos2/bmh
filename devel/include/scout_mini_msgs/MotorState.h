// Generated by gencpp from file scout_mini_msgs/MotorState.msg
// DO NOT EDIT!


#ifndef SCOUT_MINI_MSGS_MESSAGE_MOTORSTATE_H
#define SCOUT_MINI_MSGS_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace scout_mini_msgs
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : header()
    , name()
    , position()
    , velocity()
    , current()
    , temperature()  {
      position.assign(0.0);

      velocity.assign(0.0);

      current.assign(0.0);

      temperature.assign(0);
  }
  MotorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name()
    , position()
    , velocity()
    , current()
    , temperature()  {
      name.assign(std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>(_alloc));

      position.assign(0.0);

      velocity.assign(0.0);

      current.assign(0.0);

      temperature.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, 4>  _name_type;
  _name_type name;

   typedef boost::array<double, 4>  _position_type;
  _position_type position;

   typedef boost::array<double, 4>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<double, 4>  _current_type;
  _current_type current;

   typedef boost::array<int16_t, 4>  _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::scout_mini_msgs::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_mini_msgs::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::scout_mini_msgs::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::scout_mini_msgs::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::scout_mini_msgs::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_mini_msgs::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_mini_msgs::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_mini_msgs::MotorState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.current == rhs.current &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_mini_msgs::MotorState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_mini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07febe0f25b8ad0f3f0891ded3888a7a";
  }

  static const char* value(const ::scout_mini_msgs::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07febe0f25b8ad0fULL;
  static const uint64_t static_value2 = 0x3f0891ded3888a7aULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_mini_msgs/MotorState";
  }

  static const char* value(const ::scout_mini_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Joint name\n"
"string[4] name\n"
"\n"
"# The actual position by the encoder value (rad)\n"
"float64[4] position\n"
"\n"
"# The actual velocity measured by the encoder as the actual RPM value (rad/s)\n"
"float64[4] velocity\n"
"\n"
"# The current flowing through the motor (A)\n"
"float64[4] current\n"
"\n"
"# The actual temperature of motor (C)\n"
"int16[4] temperature   \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::scout_mini_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.current);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_mini_msgs::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_mini_msgs::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.temperature[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MINI_MSGS_MESSAGE_MOTORSTATE_H
