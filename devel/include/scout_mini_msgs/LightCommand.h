// Generated by gencpp from file scout_mini_msgs/LightCommand.msg
// DO NOT EDIT!


#ifndef SCOUT_MINI_MSGS_MESSAGE_LIGHTCOMMAND_H
#define SCOUT_MINI_MSGS_MESSAGE_LIGHTCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scout_mini_msgs
{
template <class ContainerAllocator>
struct LightCommand_
{
  typedef LightCommand_<ContainerAllocator> Type;

  LightCommand_()
    : mode(0)
    , custom_brightness(0)  {
    }
  LightCommand_(const ContainerAllocator& _alloc)
    : mode(0)
    , custom_brightness(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _custom_brightness_type;
  _custom_brightness_type custom_brightness;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NC)
  #undef NC
#endif
#if defined(_WIN32) && defined(NO)
  #undef NO
#endif
#if defined(_WIN32) && defined(BL)
  #undef BL
#endif
#if defined(_WIN32) && defined(CUSTOM)
  #undef CUSTOM
#endif

  enum {
    NC = 0u,
    NO = 1u,
    BL = 2u,
    CUSTOM = 3u,
  };


  typedef boost::shared_ptr< ::scout_mini_msgs::LightCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_mini_msgs::LightCommand_<ContainerAllocator> const> ConstPtr;

}; // struct LightCommand_

typedef ::scout_mini_msgs::LightCommand_<std::allocator<void> > LightCommand;

typedef boost::shared_ptr< ::scout_mini_msgs::LightCommand > LightCommandPtr;
typedef boost::shared_ptr< ::scout_mini_msgs::LightCommand const> LightCommandConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_mini_msgs::LightCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_mini_msgs::LightCommand_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::LightCommand_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.custom_brightness == rhs.custom_brightness;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_mini_msgs::LightCommand_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::LightCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_mini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::LightCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::LightCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::LightCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4493bb75f5a760b5b3db3934d947b466";
  }

  static const char* value(const ::scout_mini_msgs::LightCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4493bb75f5a760b5ULL;
  static const uint64_t static_value2 = 0xb3db3934d947b466ULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_mini_msgs/LightCommand";
  }

  static const char* value(const ::scout_mini_msgs::LightCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NC = 0\n"
"uint8 NO = 1\n"
"uint8 BL = 2\n"
"uint8 CUSTOM = 3\n"
"\n"
"uint8 mode               # Lighting Mode\n"
"uint8 custom_brightness  # Only for CUSTOM mode\n"
;
  }

  static const char* value(const ::scout_mini_msgs::LightCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.custom_brightness);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_mini_msgs::LightCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_mini_msgs::LightCommand_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "custom_brightness: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.custom_brightness);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MINI_MSGS_MESSAGE_LIGHTCOMMAND_H
