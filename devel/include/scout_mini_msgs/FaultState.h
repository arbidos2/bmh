// Generated by gencpp from file scout_mini_msgs/FaultState.msg
// DO NOT EDIT!


#ifndef SCOUT_MINI_MSGS_MESSAGE_FAULTSTATE_H
#define SCOUT_MINI_MSGS_MESSAGE_FAULTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scout_mini_msgs
{
template <class ContainerAllocator>
struct FaultState_
{
  typedef FaultState_<ContainerAllocator> Type;

  FaultState_()
    : battery_under_voltage_failure(false)
    , battery_under_voltage_alarm(false)
    , loss_remote_control(false)  {
    }
  FaultState_(const ContainerAllocator& _alloc)
    : battery_under_voltage_failure(false)
    , battery_under_voltage_alarm(false)
    , loss_remote_control(false)  {
  (void)_alloc;
    }



   typedef uint8_t _battery_under_voltage_failure_type;
  _battery_under_voltage_failure_type battery_under_voltage_failure;

   typedef uint8_t _battery_under_voltage_alarm_type;
  _battery_under_voltage_alarm_type battery_under_voltage_alarm;

   typedef uint8_t _loss_remote_control_type;
  _loss_remote_control_type loss_remote_control;





  typedef boost::shared_ptr< ::scout_mini_msgs::FaultState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_mini_msgs::FaultState_<ContainerAllocator> const> ConstPtr;

}; // struct FaultState_

typedef ::scout_mini_msgs::FaultState_<std::allocator<void> > FaultState;

typedef boost::shared_ptr< ::scout_mini_msgs::FaultState > FaultStatePtr;
typedef boost::shared_ptr< ::scout_mini_msgs::FaultState const> FaultStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_mini_msgs::FaultState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_mini_msgs::FaultState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_mini_msgs::FaultState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::FaultState_<ContainerAllocator2> & rhs)
{
  return lhs.battery_under_voltage_failure == rhs.battery_under_voltage_failure &&
    lhs.battery_under_voltage_alarm == rhs.battery_under_voltage_alarm &&
    lhs.loss_remote_control == rhs.loss_remote_control;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_mini_msgs::FaultState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::FaultState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_mini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::FaultState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::FaultState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::FaultState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a52d9af2999a855a1496f62180e48a82";
  }

  static const char* value(const ::scout_mini_msgs::FaultState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa52d9af2999a855aULL;
  static const uint64_t static_value2 = 0x1496f62180e48a82ULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_mini_msgs/FaultState";
  }

  static const char* value(const ::scout_mini_msgs::FaultState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool battery_under_voltage_failure\n"
"bool battery_under_voltage_alarm \n"
"bool loss_remote_control\n"
;
  }

  static const char* value(const ::scout_mini_msgs::FaultState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_under_voltage_failure);
      stream.next(m.battery_under_voltage_alarm);
      stream.next(m.loss_remote_control);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_mini_msgs::FaultState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_mini_msgs::FaultState_<ContainerAllocator>& v)
  {
    s << indent << "battery_under_voltage_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_under_voltage_failure);
    s << indent << "battery_under_voltage_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_under_voltage_alarm);
    s << indent << "loss_remote_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loss_remote_control);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MINI_MSGS_MESSAGE_FAULTSTATE_H
