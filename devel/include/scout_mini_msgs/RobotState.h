// Generated by gencpp from file scout_mini_msgs/RobotState.msg
// DO NOT EDIT!


#ifndef SCOUT_MINI_MSGS_MESSAGE_ROBOTSTATE_H
#define SCOUT_MINI_MSGS_MESSAGE_ROBOTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <scout_mini_msgs/FaultState.h>

namespace scout_mini_msgs
{
template <class ContainerAllocator>
struct RobotState_
{
  typedef RobotState_<ContainerAllocator> Type;

  RobotState_()
    : header()
    , robot()
    , normal_state(false)
    , control_mode()
    , battery_voltage(0.0)
    , fault_state()  {
    }
  RobotState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot(_alloc)
    , normal_state(false)
    , control_mode(_alloc)
    , battery_voltage(0.0)
    , fault_state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_type;
  _robot_type robot;

   typedef uint8_t _normal_state_type;
  _normal_state_type normal_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _control_mode_type;
  _control_mode_type control_mode;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef  ::scout_mini_msgs::FaultState_<ContainerAllocator>  _fault_state_type;
  _fault_state_type fault_state;





  typedef boost::shared_ptr< ::scout_mini_msgs::RobotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_mini_msgs::RobotState_<ContainerAllocator> const> ConstPtr;

}; // struct RobotState_

typedef ::scout_mini_msgs::RobotState_<std::allocator<void> > RobotState;

typedef boost::shared_ptr< ::scout_mini_msgs::RobotState > RobotStatePtr;
typedef boost::shared_ptr< ::scout_mini_msgs::RobotState const> RobotStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_mini_msgs::RobotState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_mini_msgs::RobotState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_mini_msgs::RobotState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::RobotState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.robot == rhs.robot &&
    lhs.normal_state == rhs.normal_state &&
    lhs.control_mode == rhs.control_mode &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.fault_state == rhs.fault_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_mini_msgs::RobotState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::RobotState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_mini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::RobotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::RobotState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::RobotState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9ce1599ddff7c1d744e7f660dd057d2";
  }

  static const char* value(const ::scout_mini_msgs::RobotState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9ce1599ddff7c1dULL;
  static const uint64_t static_value2 = 0x744e7f660dd057d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_mini_msgs/RobotState";
  }

  static const char* value(const ::scout_mini_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string robot\n"
"\n"
"bool normal_state            \n"
"string control_mode      # IDLE, CAN, REMOTE, NONE\n"
"float64 battery_voltage\n"
"\n"
"scout_mini_msgs/FaultState fault_state\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: scout_mini_msgs/FaultState\n"
"bool battery_under_voltage_failure\n"
"bool battery_under_voltage_alarm \n"
"bool loss_remote_control\n"
;
  }

  static const char* value(const ::scout_mini_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot);
      stream.next(m.normal_state);
      stream.next(m.control_mode);
      stream.next(m.battery_voltage);
      stream.next(m.fault_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_mini_msgs::RobotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_mini_msgs::RobotState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot);
    s << indent << "normal_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.normal_state);
    s << indent << "control_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.control_mode);
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "fault_state: ";
    s << std::endl;
    Printer< ::scout_mini_msgs::FaultState_<ContainerAllocator> >::stream(s, indent + "  ", v.fault_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MINI_MSGS_MESSAGE_ROBOTSTATE_H
