// Generated by gencpp from file scout_mini_msgs/DriverState.msg
// DO NOT EDIT!


#ifndef SCOUT_MINI_MSGS_MESSAGE_DRIVERSTATE_H
#define SCOUT_MINI_MSGS_MESSAGE_DRIVERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace scout_mini_msgs
{
template <class ContainerAllocator>
struct DriverState_
{
  typedef DriverState_<ContainerAllocator> Type;

  DriverState_()
    : header()
    , driver_voltage()
    , driver_temperature()
    , communication_failure()
    , low_supply_voltage()
    , motor_over_temperature()
    , driver_over_current()
    , driver_over_temperature()  {
      driver_voltage.assign(0.0);

      driver_temperature.assign(0);

      communication_failure.assign(false);

      low_supply_voltage.assign(false);

      motor_over_temperature.assign(false);

      driver_over_current.assign(false);

      driver_over_temperature.assign(false);
  }
  DriverState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , driver_voltage()
    , driver_temperature()
    , communication_failure()
    , low_supply_voltage()
    , motor_over_temperature()
    , driver_over_current()
    , driver_over_temperature()  {
  (void)_alloc;
      driver_voltage.assign(0.0);

      driver_temperature.assign(0);

      communication_failure.assign(false);

      low_supply_voltage.assign(false);

      motor_over_temperature.assign(false);

      driver_over_current.assign(false);

      driver_over_temperature.assign(false);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 4>  _driver_voltage_type;
  _driver_voltage_type driver_voltage;

   typedef boost::array<int16_t, 4>  _driver_temperature_type;
  _driver_temperature_type driver_temperature;

   typedef boost::array<uint8_t, 4>  _communication_failure_type;
  _communication_failure_type communication_failure;

   typedef boost::array<uint8_t, 4>  _low_supply_voltage_type;
  _low_supply_voltage_type low_supply_voltage;

   typedef boost::array<uint8_t, 4>  _motor_over_temperature_type;
  _motor_over_temperature_type motor_over_temperature;

   typedef boost::array<uint8_t, 4>  _driver_over_current_type;
  _driver_over_current_type driver_over_current;

   typedef boost::array<uint8_t, 4>  _driver_over_temperature_type;
  _driver_over_temperature_type driver_over_temperature;





  typedef boost::shared_ptr< ::scout_mini_msgs::DriverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_mini_msgs::DriverState_<ContainerAllocator> const> ConstPtr;

}; // struct DriverState_

typedef ::scout_mini_msgs::DriverState_<std::allocator<void> > DriverState;

typedef boost::shared_ptr< ::scout_mini_msgs::DriverState > DriverStatePtr;
typedef boost::shared_ptr< ::scout_mini_msgs::DriverState const> DriverStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_mini_msgs::DriverState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_mini_msgs::DriverState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_mini_msgs::DriverState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::DriverState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.driver_voltage == rhs.driver_voltage &&
    lhs.driver_temperature == rhs.driver_temperature &&
    lhs.communication_failure == rhs.communication_failure &&
    lhs.low_supply_voltage == rhs.low_supply_voltage &&
    lhs.motor_over_temperature == rhs.motor_over_temperature &&
    lhs.driver_over_current == rhs.driver_over_current &&
    lhs.driver_over_temperature == rhs.driver_over_temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_mini_msgs::DriverState_<ContainerAllocator1> & lhs, const ::scout_mini_msgs::DriverState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_mini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_mini_msgs::DriverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_mini_msgs::DriverState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_mini_msgs::DriverState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cd26ec35543dae5ae577b0645d8050a";
  }

  static const char* value(const ::scout_mini_msgs::DriverState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cd26ec35543dae5ULL;
  static const uint64_t static_value2 = 0xae577b0645d8050aULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_mini_msgs/DriverState";
  }

  static const char* value(const ::scout_mini_msgs::DriverState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64[4] driver_voltage\n"
"int16[4] driver_temperature\n"
"bool[4] communication_failure\n"
"bool[4] low_supply_voltage\n"
"bool[4] motor_over_temperature\n"
"bool[4] driver_over_current \n"
"bool[4] driver_over_temperature\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::scout_mini_msgs::DriverState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.driver_voltage);
      stream.next(m.driver_temperature);
      stream.next(m.communication_failure);
      stream.next(m.low_supply_voltage);
      stream.next(m.motor_over_temperature);
      stream.next(m.driver_over_current);
      stream.next(m.driver_over_temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriverState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_mini_msgs::DriverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_mini_msgs::DriverState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "driver_voltage[]" << std::endl;
    for (size_t i = 0; i < v.driver_voltage.size(); ++i)
    {
      s << indent << "  driver_voltage[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.driver_voltage[i]);
    }
    s << indent << "driver_temperature[]" << std::endl;
    for (size_t i = 0; i < v.driver_temperature.size(); ++i)
    {
      s << indent << "  driver_temperature[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.driver_temperature[i]);
    }
    s << indent << "communication_failure[]" << std::endl;
    for (size_t i = 0; i < v.communication_failure.size(); ++i)
    {
      s << indent << "  communication_failure[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.communication_failure[i]);
    }
    s << indent << "low_supply_voltage[]" << std::endl;
    for (size_t i = 0; i < v.low_supply_voltage.size(); ++i)
    {
      s << indent << "  low_supply_voltage[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.low_supply_voltage[i]);
    }
    s << indent << "motor_over_temperature[]" << std::endl;
    for (size_t i = 0; i < v.motor_over_temperature.size(); ++i)
    {
      s << indent << "  motor_over_temperature[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.motor_over_temperature[i]);
    }
    s << indent << "driver_over_current[]" << std::endl;
    for (size_t i = 0; i < v.driver_over_current.size(); ++i)
    {
      s << indent << "  driver_over_current[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.driver_over_current[i]);
    }
    s << indent << "driver_over_temperature[]" << std::endl;
    for (size_t i = 0; i < v.driver_over_temperature.size(); ++i)
    {
      s << indent << "  driver_over_temperature[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.driver_over_temperature[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MINI_MSGS_MESSAGE_DRIVERSTATE_H
